{"ast":null,"code":"import { DashboardData, postUploadImage, getSliderImages, postDeleteImage } from \"./FetchApi\";\nimport { getAllOrder } from \"../orders/FetchApi.js\";\nexport const GetAllData = async dispatch => {\n  try {\n    console.log(\"Fetching dashboard data...\"); // Debug log\n    const responseData = await DashboardData();\n    console.log(\"Dashboard data received:\", responseData); // Debug log\n\n    // Handle different response structures more comprehensively\n    let dataToDispatch;\n    if (responseData && responseData.success && responseData.data) {\n      // If response has success flag and data property\n      dataToDispatch = responseData.data;\n    } else if (responseData && responseData.data) {\n      // If response just has data property\n      dataToDispatch = responseData.data;\n    } else if (responseData && typeof responseData === 'object') {\n      // If response is directly the data object\n      dataToDispatch = responseData;\n    } else {\n      // Fallback to empty data\n      console.warn(\"Unexpected response structure:\", responseData);\n      dataToDispatch = {\n        Users: 0,\n        Orders: 0,\n        Products: 0,\n        Categories: 0\n      };\n    }\n    console.log(\"Data to dispatch:\", dataToDispatch); // Debug log\n\n    // Map all possible field variations to standardized names\n    const finalData = {\n      Users: dataToDispatch.Users || dataToDispatch.users || dataToDispatch.totalUsers || dataToDispatch.userCount || dataToDispatch.user_count || dataToDispatch.centres || dataToDispatch.Centres || 0,\n      Orders: dataToDispatch.Orders || dataToDispatch.orders || dataToDispatch.totalOrders || dataToDispatch.orderCount || dataToDispatch.order_count || dataToDispatch.requests || dataToDispatch.Requests || 0,\n      Products: dataToDispatch.Products || dataToDispatch.products || dataToDispatch.totalProducts || dataToDispatch.productCount || dataToDispatch.product_count || dataToDispatch.organs || dataToDispatch.Organs || 0,\n      Categories: dataToDispatch.Categories || dataToDispatch.categories || dataToDispatch.totalCategories || dataToDispatch.categoryCount || dataToDispatch.category_count || 0\n    };\n    console.log(\"Final data being dispatched:\", finalData); // Debug log\n\n    // Ensure all values are numbers\n    Object.keys(finalData).forEach(key => {\n      if (typeof finalData[key] !== 'number' || isNaN(finalData[key])) {\n        finalData[key] = 0;\n      }\n    });\n    dispatch({\n      type: \"totalData\",\n      payload: finalData\n    });\n  } catch (error) {\n    var _error$response;\n    console.error(\"Error fetching dashboard data:\", error);\n    console.error(\"Error details:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    console.error(\"Full error object:\", error);\n\n    // Show more detailed error info\n    if (error.response) {\n      console.error(\"Response status:\", error.response.status);\n      console.error(\"Response headers:\", error.response.headers);\n    }\n\n    // Dispatch empty data to prevent undefined errors\n    dispatch({\n      type: \"totalData\",\n      payload: {\n        Users: 0,\n        Orders: 0,\n        Products: 0,\n        Categories: 0\n      }\n    });\n\n    // Re-throw the error so the component can handle it\n    throw error;\n  }\n};\nexport const todayAllOrders = async dispatch => {\n  try {\n    const responseData = await getAllOrder();\n    if (responseData) {\n      dispatch({\n        type: \"totalOrders\",\n        payload: responseData\n      });\n    }\n  } catch (error) {\n    console.error(\"Error fetching orders:\", error);\n    dispatch({\n      type: \"totalOrders\",\n      payload: {\n        Orders: []\n      }\n    });\n  }\n};\nexport const sliderImages = async dispatch => {\n  try {\n    const responseData = await getSliderImages();\n    if (responseData && responseData.Images) {\n      dispatch({\n        type: \"sliderImages\",\n        payload: responseData.Images\n      });\n    } else if (responseData && Array.isArray(responseData)) {\n      dispatch({\n        type: \"sliderImages\",\n        payload: responseData\n      });\n    }\n  } catch (error) {\n    console.error(\"Error fetching slider images:\", error);\n    dispatch({\n      type: \"sliderImages\",\n      payload: []\n    });\n  }\n};\nexport const deleteImage = async (id, dispatch) => {\n  dispatch({\n    type: \"imageUpload\",\n    payload: true\n  });\n  try {\n    const responseData = await postDeleteImage(id);\n    if (responseData && responseData.success) {\n      setTimeout(() => {\n        sliderImages(dispatch);\n        dispatch({\n          type: \"imageUpload\",\n          payload: false\n        });\n      }, 1000);\n    } else {\n      dispatch({\n        type: \"imageUpload\",\n        payload: false\n      });\n    }\n  } catch (error) {\n    console.error(\"Error deleting image:\", error);\n    dispatch({\n      type: \"imageUpload\",\n      payload: false\n    });\n  }\n};\nexport const uploadImage = async (image, dispatch) => {\n  dispatch({\n    type: \"imageUpload\",\n    payload: true\n  });\n  const formData = new FormData();\n  formData.append(\"image\", image);\n  console.log(\"Uploading image:\", formData.get(\"image\"));\n  try {\n    const responseData = await postUploadImage(formData);\n    if (responseData && responseData.success) {\n      setTimeout(() => {\n        dispatch({\n          type: \"imageUpload\",\n          payload: false\n        });\n        sliderImages(dispatch);\n      }, 1000);\n    } else {\n      dispatch({\n        type: \"imageUpload\",\n        payload: false\n      });\n    }\n  } catch (error) {\n    console.error(\"Error uploading image:\", error);\n    dispatch({\n      type: \"imageUpload\",\n      payload: false\n    });\n  }\n};","map":{"version":3,"names":["DashboardData","postUploadImage","getSliderImages","postDeleteImage","getAllOrder","GetAllData","dispatch","console","log","responseData","dataToDispatch","success","data","warn","Users","Orders","Products","Categories","finalData","users","totalUsers","userCount","user_count","centres","Centres","orders","totalOrders","orderCount","order_count","requests","Requests","products","totalProducts","productCount","product_count","organs","Organs","categories","totalCategories","categoryCount","category_count","Object","keys","forEach","key","isNaN","type","payload","error","_error$response","response","message","status","headers","todayAllOrders","sliderImages","Images","Array","isArray","deleteImage","id","setTimeout","uploadImage","image","formData","FormData","append","get"],"sources":["C:/Users/Lenovo/Downloads/OrganEase-main/client/src/components/admin/dashboardAdmin/Action.js"],"sourcesContent":["import {\n  DashboardData,\n  postUploadImage,\n  getSliderImages,\n  postDeleteImage,\n} from \"./FetchApi\";\nimport { getAllOrder } from \"../orders/FetchApi.js\";\n\nexport const GetAllData = async (dispatch) => {\n  try {\n    console.log(\"Fetching dashboard data...\"); // Debug log\n    const responseData = await DashboardData();\n    console.log(\"Dashboard data received:\", responseData); // Debug log\n    \n    // Handle different response structures more comprehensively\n    let dataToDispatch;\n    \n    if (responseData && responseData.success && responseData.data) {\n      // If response has success flag and data property\n      dataToDispatch = responseData.data;\n    } else if (responseData && responseData.data) {\n      // If response just has data property\n      dataToDispatch = responseData.data;\n    } else if (responseData && typeof responseData === 'object') {\n      // If response is directly the data object\n      dataToDispatch = responseData;\n    } else {\n      // Fallback to empty data\n      console.warn(\"Unexpected response structure:\", responseData);\n      dataToDispatch = { Users: 0, Orders: 0, Products: 0, Categories: 0 };\n    }\n    \n    console.log(\"Data to dispatch:\", dataToDispatch); // Debug log\n    \n    // Map all possible field variations to standardized names\n    const finalData = {\n      Users: dataToDispatch.Users || \n             dataToDispatch.users || \n             dataToDispatch.totalUsers || \n             dataToDispatch.userCount || \n             dataToDispatch.user_count || \n             dataToDispatch.centres || \n             dataToDispatch.Centres || \n             0,\n      Orders: dataToDispatch.Orders || \n              dataToDispatch.orders || \n              dataToDispatch.totalOrders || \n              dataToDispatch.orderCount || \n              dataToDispatch.order_count || \n              dataToDispatch.requests || \n              dataToDispatch.Requests || \n              0,\n      Products: dataToDispatch.Products || \n                dataToDispatch.products || \n                dataToDispatch.totalProducts || \n                dataToDispatch.productCount || \n                dataToDispatch.product_count || \n                dataToDispatch.organs || \n                dataToDispatch.Organs || \n                0,\n      Categories: dataToDispatch.Categories || \n                  dataToDispatch.categories || \n                  dataToDispatch.totalCategories || \n                  dataToDispatch.categoryCount || \n                  dataToDispatch.category_count || \n                  0,\n    };\n    \n    console.log(\"Final data being dispatched:\", finalData); // Debug log\n    \n    // Ensure all values are numbers\n    Object.keys(finalData).forEach(key => {\n      if (typeof finalData[key] !== 'number' || isNaN(finalData[key])) {\n        finalData[key] = 0;\n      }\n    });\n    \n    dispatch({ type: \"totalData\", payload: finalData });\n    \n  } catch (error) {\n    console.error(\"Error fetching dashboard data:\", error);\n    console.error(\"Error details:\", error.response?.data || error.message);\n    console.error(\"Full error object:\", error);\n    \n    // Show more detailed error info\n    if (error.response) {\n      console.error(\"Response status:\", error.response.status);\n      console.error(\"Response headers:\", error.response.headers);\n    }\n    \n    // Dispatch empty data to prevent undefined errors\n    dispatch({ \n      type: \"totalData\", \n      payload: { Users: 0, Orders: 0, Products: 0, Categories: 0 } \n    });\n    \n    // Re-throw the error so the component can handle it\n    throw error;\n  }\n};\n\nexport const todayAllOrders = async (dispatch) => {\n  try {\n    const responseData = await getAllOrder();\n    if (responseData) {\n      dispatch({ type: \"totalOrders\", payload: responseData });\n    }\n  } catch (error) {\n    console.error(\"Error fetching orders:\", error);\n    dispatch({ type: \"totalOrders\", payload: { Orders: [] } });\n  }\n};\n\nexport const sliderImages = async (dispatch) => {\n  try {\n    const responseData = await getSliderImages();\n    if (responseData && responseData.Images) {\n      dispatch({ type: \"sliderImages\", payload: responseData.Images });\n    } else if (responseData && Array.isArray(responseData)) {\n      dispatch({ type: \"sliderImages\", payload: responseData });\n    }\n  } catch (error) {\n    console.error(\"Error fetching slider images:\", error);\n    dispatch({ type: \"sliderImages\", payload: [] });\n  }\n};\n\nexport const deleteImage = async (id, dispatch) => {\n  dispatch({ type: \"imageUpload\", payload: true });\n  try {\n    const responseData = await postDeleteImage(id);\n    if (responseData && responseData.success) {\n      setTimeout(() => {\n        sliderImages(dispatch);\n        dispatch({ type: \"imageUpload\", payload: false });\n      }, 1000);\n    } else {\n      dispatch({ type: \"imageUpload\", payload: false });\n    }\n  } catch (error) {\n    console.error(\"Error deleting image:\", error);\n    dispatch({ type: \"imageUpload\", payload: false });\n  }\n};\n\nexport const uploadImage = async (image, dispatch) => {\n  dispatch({ type: \"imageUpload\", payload: true });\n  const formData = new FormData();\n  formData.append(\"image\", image);\n  console.log(\"Uploading image:\", formData.get(\"image\"));\n  \n  try {\n    const responseData = await postUploadImage(formData);\n    if (responseData && responseData.success) {\n      setTimeout(() => {\n        dispatch({ type: \"imageUpload\", payload: false });\n        sliderImages(dispatch);\n      }, 1000);\n    } else {\n      dispatch({ type: \"imageUpload\", payload: false });\n    }\n  } catch (error) {\n    console.error(\"Error uploading image:\", error);\n    dispatch({ type: \"imageUpload\", payload: false });\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}